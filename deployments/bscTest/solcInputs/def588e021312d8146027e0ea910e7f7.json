{
  "language": "Solidity",
  "sources": {
    "contracts/Recipient.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity 0.8.9;\n\ncontract Recipient {\n    enum ExecutionStatus {\n        Fail,\n        Success,\n        Retry\n    }\n\n    address public immutable messageBus;\n\n    address public sender;\n    address public token;\n    uint256 public amount;\n    uint64 public srcChainId;\n    address public executor;\n    uint256 public messagerData;\n\n    modifier onlyMessageBus() {\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        _;\n    }\n\n    constructor(address _messageBus) {\n        messageBus = _messageBus;\n    }\n\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external onlyMessageBus returns (ExecutionStatus) {\n        sender = _sender;\n        token = _token;\n        amount = _amount;\n        srcChainId = _srcChainId;\n        executor = _executor;\n        messagerData = abi.decode(_message, (uint256));\n        return ExecutionStatus.Success;\n    }\n\n    function getSendMessage()\n        external\n        view\n        returns (\n            address,\n            address,\n            uint256,\n            uint64,\n            address,\n            uint256\n        )\n    {\n        return (sender, token, amount, srcChainId, executor, messagerData);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}