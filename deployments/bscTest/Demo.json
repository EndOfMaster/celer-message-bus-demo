{
  "address": "0xf73932254090dab19700e5a2D61df2CCDE6fCC11",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "toChain",
          "type": "uint64"
        }
      ],
      "name": "CrossChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer2Address",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransfer",
      "outputs": [
        {
          "internalType": "enum IBaseStruct.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "executeMessageWithTransferFallback",
      "outputs": [
        {
          "internalType": "enum IBaseStruct.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "enum IBaseStruct.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "back",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "maxSlippage",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "internalType": "struct IBaseStruct.TransferData",
          "name": "_data",
          "type": "tuple"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sendData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfer2",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3275dfd2c8fc35e3062520b5058b78f8cf2035c4f10f14f966e60f775aab3d69",
  "receipt": {
    "to": null,
    "from": "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "contractAddress": "0xf73932254090dab19700e5a2D61df2CCDE6fCC11",
    "transactionIndex": 3,
    "gasUsed": "1745157",
    "logsBloom": "0x
    "blockHash": "0xab8c46ef393ace150835646a9bef69d0ddcd4051b9bfbb70a7297ad679ce7f02",
    "transactionHash": "0x3275dfd2c8fc35e3062520b5058b78f8cf2035c4f10f14f966e60f775aab3d69",
    "logs": [],
    "blockNumber": 20441807,
    "cumulativeGasUsed": "7358212",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAd204986D6cB67A5Bc76a3CB8974823F43Cb9AAA"
  ],
  "numDeployments": 1,
  "solcInputHash": "c4f07e577cbb89ae9650a84d15a30fe2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"toChain\",\"type\":\"uint64\"}],\"name\":\"CrossChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer2Address\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[{\"internalType\":\"enum IBaseStruct.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"enum IBaseStruct.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"enum IBaseStruct.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"back\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct IBaseStruct.TransferData\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sendData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer2\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Demo.sol\":\"Demo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/Demo.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.9;\\n\\nimport \\\"./support/Base.sol\\\";\\n\\ncontract Demo is Base {\\n    using SafeERC20 for IERC20;\\n\\n    event Send(bytes32 transferId);\\n\\n    constructor(address _messageBus) Base(_messageBus) {}\\n\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint32 _maxSlippage\\n    ) external payable {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        TransferData memory _transferData = TransferData({ back: true, maxSlippage: _maxSlippage, to: msg.sender });\\n\\n        (uint256 _fee, bytes memory _sendData) = getFee(_transferData);\\n\\n        require(msg.value >= _fee, \\\"Insufficient fee\\\");\\n\\n        bytes32 transferId = MessageSenderLib.sendMessageWithTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            uint64(block.timestamp),\\n            _maxSlippage,\\n            _sendData, // message\\n            MsgDataTypes.BridgeSendType.Liquidity, // the bridge type, we are using liquidity bridge at here\\n            messageBus,\\n            _fee\\n        );\\n        emit Send(transferId);\\n    }\\n\\n    function getFee(TransferData memory _data) public view returns (uint256 _fee, bytes memory _sendData) {\\n        _sendData = abi.encode(_data);\\n        _fee = IMessageBus(messageBus).calcFee(_sendData);\\n    }\\n}\\n\",\"keccak256\":\"0x82d3108017962d34b4e4ae51a828fa1b4b806b1346843de2043b98f7b3bad6e0\",\"license\":\"Unlicense\"},\"contracts/interface/IBaseStruct.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.9;\\n\\ninterface IBaseStruct {\\n    // ------------ message bus use ------------\\n\\n    struct TransferRequest {\\n        uint64 nonce;\\n        address[] accounts;\\n        uint256[] amounts;\\n        address sender;\\n    }\\n\\n    enum ExecutionStatus {\\n        Fail,\\n        Success,\\n        Retry\\n    }\\n\\n    // ------------ this demo use ------------\\n\\n    struct TransferData {\\n        bool back; //If true returns the source chain\\n        uint32 maxSlippage;\\n        address to;\\n    }\\n}\\n\",\"keccak256\":\"0xa31dbf34b9d9090d1d077555f8d509726257dedf49762bae3316a3ed608752a1\",\"license\":\"Unlicense\"},\"contracts/interface/IMessageBus.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.9;\\n\\ninterface IMessageBus {\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb987ff38867e2ffd5d763498af9884022fdcb4edfc55cac7dba3adc8373f1625\",\"license\":\"Unlicense\"},\"contracts/lib/MessageSenderLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        (bytes32 transferId, address bridge) = sendTokenTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            _nonce,\\n            _maxSlippage,\\n            _bridgeSendType,\\n            _messageBus\\n        );\\n        if (_message.length > 0) {\\n            IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n                _receiver,\\n                _dstChainId,\\n                bridge,\\n                transferId,\\n                _message\\n            );\\n        }\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus\\n    ) internal returns (bytes32 transferId, address bridge) {\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            bridge = IMessageBus(_messageBus).liquidityBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n            transferId = computeLiqBridgeTransferId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            bridge = IMessageBus(_messageBus).pegVault();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IOriginalTokenVault(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = computePegV1DepositId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            bridge = IMessageBus(_messageBus).pegBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IPeggedTokenBridge(bridge).burn(_token, _amount, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n            transferId = computePegV1BurnId(_receiver, _token, _amount, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n            bridge = IMessageBus(_messageBus).pegVaultV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IOriginalTokenVaultV2(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    function computeLiqBridgeTransferId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1DepositId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1BurnId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid)));\\n    }\\n}\\n\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\\n    function burnFrom(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\\ninterface IMessageBus {\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    /**\\n     * @notice Sends a message to a contract on another chain.\\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\\n     * If messages with the same Id are sent, only one of them will succeed at dst chain..\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to a contract on another chain.\\n     * If messages with the same srcTransferId are sent, only one of them will succeed at dst chain..\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n}\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\",\"keccak256\":\"0x69240b7391e95598c0b26f1268a10771f427598c4e068bb78713e72925efa208\",\"license\":\"GPL-3.0-only\"},\"contracts/support/Base.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.9;\\n\\nimport \\\"../interface/IBaseStruct.sol\\\";\\nimport \\\"../interface/IMessageBus.sol\\\";\\nimport { MessageSenderLib, MsgDataTypes } from \\\"../lib/MessageSenderLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract Base is IBaseStruct {\\n    using SafeERC20 for IERC20;\\n\\n    event CrossChain(bytes32 transferId, address sender, address token, uint256 amount, uint64 toChain);\\n    event Transfer2Address(address sender, address token, uint256 amount);\\n\\n    address public immutable messageBus;\\n\\n    constructor(address _messageBus) {\\n        messageBus = _messageBus;\\n    }\\n\\n    modifier onlyMessageBus() {\\n        require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        _;\\n    }\\n\\n    function executeMessageWithTransfer(\\n        address _sender, //Send cross chain contracts\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId, //Source chain number\\n        bytes calldata _message, //send data\\n        address //_executor Address to trigger execute\\n    ) external onlyMessageBus returns (ExecutionStatus) {\\n        TransferData memory _data = abi.decode(_message, (TransferData));\\n        if (_data.back) {\\n            bytes memory _sendData = abi.encode(TransferData({ back: false, maxSlippage: _data.maxSlippage, to: _data.to }));\\n            uint256 _fee = IMessageBus(messageBus).calcFee(_sendData);\\n\\n            bytes32 transferId = MessageSenderLib.sendMessageWithTransfer(\\n                _sender,\\n                _token, //test use original token\\n                _amount, //test use original amount\\n                _srcChainId,\\n                uint64(block.timestamp),\\n                _data.maxSlippage,\\n                _sendData, // message\\n                MsgDataTypes.BridgeSendType.Liquidity, // the bridge type, we are using liquidity bridge at here\\n                messageBus,\\n                _fee\\n            );\\n            emit CrossChain(transferId, _data.to, _token, _amount, _srcChainId);\\n        } else {\\n            IERC20(_token).transfer(_data.to, _amount);\\n            emit Transfer2Address(_data.to, _token, _amount);\\n        }\\n        return ExecutionStatus.Success;\\n    }\\n\\n    //Bridge error call this\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message\\n    ) external payable onlyMessageBus returns (ExecutionStatus) {\\n        TransferRequest memory _transfer = abi.decode(_message, (TransferRequest));\\n        IERC20(_token).safeTransfer(_transfer.sender, _amount);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    TransferRequest public transfer2;\\n\\n    //srcChain Transaction error call this\\n    function executeMessageWithTransferFallback(\\n        address, //_sender\\n        address _token,\\n        uint256 _amount,\\n        uint64, //_srcChainId\\n        bytes memory _message\\n    ) external payable onlyMessageBus returns (ExecutionStatus) {\\n        TransferRequest memory _transfer = abi.decode((_message), (TransferRequest));\\n        IERC20(_token).safeTransfer(_transfer.sender, _amount);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xafb5a377cf1710030e1980191149721730aca08600253021450a12108355bd8e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611f58380380611f5883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611e9c6100bc60003960008181610167015281816101c1015281816102d8015281816103a40152818161043d01528181610507015281816105a2015261072d0152611e9c6000f3fe60806040526004361061006e5760003560e01c80636bf701641161004b5780636bf70164146101075780637cd2bffc14610135578063a1a227fa14610155578063f00f39ce146101a157005b806320be95f214610077578063248c44e8146100a057806331096f44146100f457005b3661007557005b005b61008a610085366004611611565b6101b4565b6040516100979190611682565b60405180910390f35b3480156100ac57600080fd5b506000546003546100cd916001600160401b0316906001600160a01b031682565b604080516001600160401b0390931683526001600160a01b03909116602083015201610097565b6100756101023660046116d3565b61023e565b34801561011357600080fd5b506101276101223660046117b3565b610343565b60405161009792919061187a565b34801561014157600080fd5b5061008a610150366004611893565b610430565b34801561016157600080fd5b506101897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610097565b61008a6101af36600461192b565b610720565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102075760405162461bcd60e51b81526004016101fe90611a01565b60405180910390fd5b600061021583850185611ac6565b6060810151909150610232906001600160a01b03881690876107aa565b50600195945050505050565b6102536001600160a01b038516333086610812565b604080516060810182526001815263ffffffff83166020820152339181019190915260008061028183610343565b91509150813410156102c85760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b60448201526064016101fe565b60006102fd89898989428a8860017f00000000000000000000000000000000000000000000000000000000000000008c610850565b90507f086a0b34f7ece83090c3c5316bf102eec3c65cfd255dc74a383b55e19eb539ac8160405161033091815260200190565b60405180910390a1505050505050505050565b604080518251151560208083019190915283015163ffffffff1681830152908201516001600160a01b031660608281019190915260009160800160408051601f198184030181529082905263299aee5160e11b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635335dca2906103d9908490600401611bd8565b60206040518083038186803b1580156103f157600080fd5b505afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104299190611beb565b9150915091565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461047a5760405162461bcd60e51b81526004016101fe90611a01565b6000610488848601866117b3565b805190915015610637576040805160608082018352600080835260208581015163ffffffff908116828601908152878701516001600160a01b039081169688019687528751938401859052905190911682870152935184168184015284518082039093018352608081019485905263299aee5160e11b909452909290917f00000000000000000000000000000000000000000000000000000000000000001690635335dca29061053c908590608401611bd8565b60206040518083038186803b15801561055457600080fd5b505afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190611beb565b905060006105c78c8c8c8c4289602001518960017f00000000000000000000000000000000000000000000000000000000000000008b610850565b60408581015181518381526001600160a01b039182166020820152908e1681830152606081018d90526001600160401b038c16608082015290519192507f41dd76b21aac667802867bce2e2dd73ddc80b1ebb981a7b1aadd7a665d79c36d919081900360a00190a1505050610711565b604081810151905163a9059cbb60e01b81526001600160a01b039182166004820152602481018990529089169063a9059cbb90604401602060405180830381600087803b15801561068757600080fd5b505af115801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190611c04565b5060408082015181516001600160a01b039182168152908a1660208201529081018890527f132a65941a6f3cebe4ba9c9a5d39d0283a7666cfa2eb2d0be33057b3fcb625d59060600160405180910390a15b50600198975050505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461076a5760405162461bcd60e51b81526004016101fe90611a01565b6000828060200190518101906107809190611c87565b606081015190915061079d906001600160a01b03881690876107aa565b5060019695505050505050565b6040516001600160a01b03831660248201526044810182905261080d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526108e9565b505050565b6040516001600160a01b038085166024830152831660448201526064810182905261084a9085906323b872dd60e01b906084016107d6565b50505050565b60008060006108658d8d8d8d8d8d8c8c6109bb565b88519193509150156108d957846001600160a01b0316634289fbb3858f8d85878d6040518763ffffffff1660e01b81526004016108a6959493929190611d8a565b6000604051808303818588803b1580156108bf57600080fd5b505af11580156108d3573d6000803e3d6000fd5b50505050505b509b9a5050505050505050505050565b600061093e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661114d9092919063ffffffff16565b80519091501561080d578080602001905181019061095c9190611c04565b61080d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101fe565b60008060018460068111156109d2576109d261166c565b1415610b0057826001600160a01b03166382980dc46040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1157600080fd5b505afa158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190611dcc565b9050610a5f6001600160a01b038a16828a611166565b60405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a90526001600160401b03808a1660648401528816608483015263ffffffff871660a483015282169063a5977fbb9060c401600060405180830381600087803b158015610ad457600080fd5b505af1158015610ae8573d6000803e3d6000fd5b50505050610af98a8a8a8a8a611227565b9150611140565b6002846006811115610b1457610b1461166c565b1415610c1457826001600160a01b031663d8257d176040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5357600080fd5b505afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190611dcc565b9050610ba16001600160a01b038a16828a611166565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610bd5959493929190611de9565b600060405180830381600087803b158015610bef57600080fd5b505af1158015610c03573d6000803e3d6000fd5b50505050610af98a8a8a8a8a6112aa565b6003846006811115610c2857610c2861166c565b1415610db957826001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6757600080fd5b505afa158015610c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9f9190611dcc565b9050610cb56001600160a01b038a16828a611166565b604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b811660448301526001600160401b038816606483015282169063de790c7e90608401600060405180830381600087803b158015610d1657600080fd5b505af1158015610d2a573d6000803e3d6000fd5b50610d44925050506001600160a01b038a16826000611313565b604080516001600160601b031930606090811b82166020808501919091528d821b83166034850152604884018d9052908e901b90911660688301526001600160c01b031960c08a811b8216607c85015246901b1660848301528251808303606c018152608c9092019092528051910120610af9565b6004846006811115610dcd57610dcd61166c565b1415610ee057826001600160a01b031663c66a9c5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0c57600080fd5b505afa158015610e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e449190611dcc565b9050610e5a6001600160a01b038a16828a611166565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610e8e959493929190611de9565b602060405180830381600087803b158015610ea857600080fd5b505af1158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af99190611beb565b6005846006811115610ef457610ef461166c565b141561102357826001600160a01b03166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3357600080fd5b505afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190611dcc565b9050610f816001600160a01b038a16828a611166565b806001600160a01b031663a00293018a8a8a8e8b6040518663ffffffff1660e01b8152600401610fb5959493929190611de9565b602060405180830381600087803b158015610fcf57600080fd5b505af1158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110079190611beb565b915061101e6001600160a01b038a16826000611313565b611140565b60068460068111156110375761103761166c565b14156110f857826001600160a01b03166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190611dcc565b90506110c46001600160a01b038a16828a611166565b806001600160a01b0316639e422c338a8a8a8e8b6040518663ffffffff1660e01b8152600401610fb5959493929190611de9565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f727465640000000000000060448201526064016101fe565b9850989650505050505050565b606061115c8484600085611437565b90505b9392505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156111b257600080fd5b505afa1580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190611beb565b6111f49190611e24565b6040516001600160a01b03851660248201526044810182905290915061084a90859063095ea7b360e01b906064016107d6565b6040516001600160601b031930606090811b8216602084015287811b8216603484015286901b166048820152605c81018490526001600160c01b031960c084811b8216607c84015283811b8216608484015246901b16608c8201526000906094015b60405160208183030381529060405280519060200120905095945050505050565b6040516001600160601b031930606090811b8216602084015286811b82166034840152604883018690526001600160c01b031960c086811b821660688601529189901b909216607084015283811b8216608484015246901b16608c820152600090609401611289565b80158061139c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561136257600080fd5b505afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139a9190611beb565b155b6114075760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101fe565b6040516001600160a01b03831660248201526044810182905261080d90849063095ea7b360e01b906064016107d6565b6060824710156114985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101fe565b6001600160a01b0385163b6114ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101fe565b600080866001600160a01b0316858760405161150b9190611e4a565b60006040518083038185875af1925050503d8060008114611548576040519150601f19603f3d011682016040523d82523d6000602084013e61154d565b606091505b509150915061155d828286611568565b979650505050505050565b6060831561157757508161115f565b8251156115875782518084602001fd5b8160405162461bcd60e51b81526004016101fe9190611bd8565b6001600160a01b03811681146115b657600080fd5b50565b80356115c4816115a1565b919050565b60008083601f8401126115db57600080fd5b5081356001600160401b038111156115f257600080fd5b60208301915083602082850101111561160a57600080fd5b9250929050565b6000806000806060858703121561162757600080fd5b8435611632816115a1565b93506020850135925060408501356001600160401b0381111561165457600080fd5b611660878288016115c9565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106116a457634e487b7160e01b600052602160045260246000fd5b91905290565b6001600160401b03811681146115b657600080fd5b803563ffffffff811681146115c457600080fd5b600080600080600060a086880312156116eb57600080fd5b85356116f6816115a1565b94506020860135611706816115a1565b935060408601359250606086013561171d816116aa565b915061172b608087016116bf565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171561176f5761176f611737565b60405290565b604051601f8201601f191681016001600160401b038111828210171561179d5761179d611737565b604052919050565b80151581146115b657600080fd5b6000606082840312156117c557600080fd5b604051606081018181106001600160401b03821117156117e7576117e7611737565b60405282356117f5816117a5565b8152611803602084016116bf565b60208201526040830135611816816115a1565b60408201529392505050565b60005b8381101561183d578181015183820152602001611825565b8381111561084a5750506000910152565b60008151808452611866816020860160208601611822565b601f01601f19169290920160200192915050565b82815260406020820152600061115c604083018461184e565b600080600080600080600060c0888a0312156118ae57600080fd5b87356118b9816115a1565b965060208801356118c9816115a1565b95506040880135945060608801356118e0816116aa565b935060808801356001600160401b038111156118fb57600080fd5b6119078a828b016115c9565b90945092505060a088013561191b816115a1565b8091505092959891949750929550565b600080600080600060a0868803121561194357600080fd5b853561194e816115a1565b945060208681013561195f816115a1565b9450604087013593506060870135611976816116aa565b925060808701356001600160401b038082111561199257600080fd5b818901915089601f8301126119a657600080fd5b8135818111156119b8576119b8611737565b6119ca601f8201601f19168501611775565b91508082528a848285010111156119e057600080fd5b80848401858401376000848284010152508093505050509295509295909350565b60208082526019908201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604082015260600190565b60006001600160401b03821115611a5157611a51611737565b5060051b60200190565b600082601f830112611a6c57600080fd5b81356020611a81611a7c83611a38565b611775565b82815260059290921b84018101918181019086841115611aa057600080fd5b8286015b84811015611abb5780358352918301918301611aa4565b509695505050505050565b60006020808385031215611ad957600080fd5b82356001600160401b0380821115611af057600080fd5b9084019060808287031215611b0457600080fd5b611b0c61174d565b8235611b17816116aa565b81528284013582811115611b2a57600080fd5b8301601f81018813611b3b57600080fd5b8035611b49611a7c82611a38565b81815260059190911b8201860190868101908a831115611b6857600080fd5b928701925b82841015611b8f578335611b80816115a1565b82529287019290870190611b6d565b8088860152505050506040830135935081841115611bac57600080fd5b611bb887858501611a5b565b6040820152611bc9606084016115b9565b60608201529695505050505050565b60208152600061115f602083018461184e565b600060208284031215611bfd57600080fd5b5051919050565b600060208284031215611c1657600080fd5b815161115f816117a5565b80516115c4816115a1565b600082601f830112611c3d57600080fd5b81516020611c4d611a7c83611a38565b82815260059290921b84018101918181019086841115611c6c57600080fd5b8286015b84811015611abb5780518352918301918301611c70565b60006020808385031215611c9a57600080fd5b82516001600160401b0380821115611cb157600080fd5b9084019060808287031215611cc557600080fd5b611ccd61174d565b8251611cd8816116aa565b81528284015182811115611ceb57600080fd5b8301601f81018813611cfc57600080fd5b8051611d0a611a7c82611a38565b81815260059190911b8201860190868101908a831115611d2957600080fd5b928701925b82841015611d50578351611d41816115a1565b82529287019290870190611d2e565b8088860152505050506040830151935081841115611d6d57600080fd5b611d7987858501611c2c565b6040820152611bc960608401611c21565b6001600160a01b0386811682526001600160401b0386166020830152841660408201526060810183905260a06080820181905260009061155d9083018461184e565b600060208284031215611dde57600080fd5b815161115f816115a1565b6001600160a01b03958616815260208101949094526001600160401b0392831660408501529316606083015291909116608082015260a00190565b60008219821115611e4557634e487b7160e01b600052601160045260246000fd5b500190565b60008251611e5c818460208701611822565b919091019291505056fea26469706673582212205af5c5b4c06e053fe4e122f4bf78a57b9063e4f4b274d4137de60598a5cdd99b64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061006e5760003560e01c80636bf701641161004b5780636bf70164146101075780637cd2bffc14610135578063a1a227fa14610155578063f00f39ce146101a157005b806320be95f214610077578063248c44e8146100a057806331096f44146100f457005b3661007557005b005b61008a610085366004611611565b6101b4565b6040516100979190611682565b60405180910390f35b3480156100ac57600080fd5b506000546003546100cd916001600160401b0316906001600160a01b031682565b604080516001600160401b0390931683526001600160a01b03909116602083015201610097565b6100756101023660046116d3565b61023e565b34801561011357600080fd5b506101276101223660046117b3565b610343565b60405161009792919061187a565b34801561014157600080fd5b5061008a610150366004611893565b610430565b34801561016157600080fd5b506101897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610097565b61008a6101af36600461192b565b610720565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102075760405162461bcd60e51b81526004016101fe90611a01565b60405180910390fd5b600061021583850185611ac6565b6060810151909150610232906001600160a01b03881690876107aa565b50600195945050505050565b6102536001600160a01b038516333086610812565b604080516060810182526001815263ffffffff83166020820152339181019190915260008061028183610343565b91509150813410156102c85760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b60448201526064016101fe565b60006102fd89898989428a8860017f00000000000000000000000000000000000000000000000000000000000000008c610850565b90507f086a0b34f7ece83090c3c5316bf102eec3c65cfd255dc74a383b55e19eb539ac8160405161033091815260200190565b60405180910390a1505050505050505050565b604080518251151560208083019190915283015163ffffffff1681830152908201516001600160a01b031660608281019190915260009160800160408051601f198184030181529082905263299aee5160e11b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635335dca2906103d9908490600401611bd8565b60206040518083038186803b1580156103f157600080fd5b505afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104299190611beb565b9150915091565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461047a5760405162461bcd60e51b81526004016101fe90611a01565b6000610488848601866117b3565b805190915015610637576040805160608082018352600080835260208581015163ffffffff908116828601908152878701516001600160a01b039081169688019687528751938401859052905190911682870152935184168184015284518082039093018352608081019485905263299aee5160e11b909452909290917f00000000000000000000000000000000000000000000000000000000000000001690635335dca29061053c908590608401611bd8565b60206040518083038186803b15801561055457600080fd5b505afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190611beb565b905060006105c78c8c8c8c4289602001518960017f00000000000000000000000000000000000000000000000000000000000000008b610850565b60408581015181518381526001600160a01b039182166020820152908e1681830152606081018d90526001600160401b038c16608082015290519192507f41dd76b21aac667802867bce2e2dd73ddc80b1ebb981a7b1aadd7a665d79c36d919081900360a00190a1505050610711565b604081810151905163a9059cbb60e01b81526001600160a01b039182166004820152602481018990529089169063a9059cbb90604401602060405180830381600087803b15801561068757600080fd5b505af115801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190611c04565b5060408082015181516001600160a01b039182168152908a1660208201529081018890527f132a65941a6f3cebe4ba9c9a5d39d0283a7666cfa2eb2d0be33057b3fcb625d59060600160405180910390a15b50600198975050505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461076a5760405162461bcd60e51b81526004016101fe90611a01565b6000828060200190518101906107809190611c87565b606081015190915061079d906001600160a01b03881690876107aa565b5060019695505050505050565b6040516001600160a01b03831660248201526044810182905261080d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526108e9565b505050565b6040516001600160a01b038085166024830152831660448201526064810182905261084a9085906323b872dd60e01b906084016107d6565b50505050565b60008060006108658d8d8d8d8d8d8c8c6109bb565b88519193509150156108d957846001600160a01b0316634289fbb3858f8d85878d6040518763ffffffff1660e01b81526004016108a6959493929190611d8a565b6000604051808303818588803b1580156108bf57600080fd5b505af11580156108d3573d6000803e3d6000fd5b50505050505b509b9a5050505050505050505050565b600061093e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661114d9092919063ffffffff16565b80519091501561080d578080602001905181019061095c9190611c04565b61080d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101fe565b60008060018460068111156109d2576109d261166c565b1415610b0057826001600160a01b03166382980dc46040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1157600080fd5b505afa158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190611dcc565b9050610a5f6001600160a01b038a16828a611166565b60405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a90526001600160401b03808a1660648401528816608483015263ffffffff871660a483015282169063a5977fbb9060c401600060405180830381600087803b158015610ad457600080fd5b505af1158015610ae8573d6000803e3d6000fd5b50505050610af98a8a8a8a8a611227565b9150611140565b6002846006811115610b1457610b1461166c565b1415610c1457826001600160a01b031663d8257d176040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5357600080fd5b505afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190611dcc565b9050610ba16001600160a01b038a16828a611166565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610bd5959493929190611de9565b600060405180830381600087803b158015610bef57600080fd5b505af1158015610c03573d6000803e3d6000fd5b50505050610af98a8a8a8a8a6112aa565b6003846006811115610c2857610c2861166c565b1415610db957826001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6757600080fd5b505afa158015610c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9f9190611dcc565b9050610cb56001600160a01b038a16828a611166565b604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b811660448301526001600160401b038816606483015282169063de790c7e90608401600060405180830381600087803b158015610d1657600080fd5b505af1158015610d2a573d6000803e3d6000fd5b50610d44925050506001600160a01b038a16826000611313565b604080516001600160601b031930606090811b82166020808501919091528d821b83166034850152604884018d9052908e901b90911660688301526001600160c01b031960c08a811b8216607c85015246901b1660848301528251808303606c018152608c9092019092528051910120610af9565b6004846006811115610dcd57610dcd61166c565b1415610ee057826001600160a01b031663c66a9c5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0c57600080fd5b505afa158015610e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e449190611dcc565b9050610e5a6001600160a01b038a16828a611166565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610e8e959493929190611de9565b602060405180830381600087803b158015610ea857600080fd5b505af1158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af99190611beb565b6005846006811115610ef457610ef461166c565b141561102357826001600160a01b03166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3357600080fd5b505afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190611dcc565b9050610f816001600160a01b038a16828a611166565b806001600160a01b031663a00293018a8a8a8e8b6040518663ffffffff1660e01b8152600401610fb5959493929190611de9565b602060405180830381600087803b158015610fcf57600080fd5b505af1158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110079190611beb565b915061101e6001600160a01b038a16826000611313565b611140565b60068460068111156110375761103761166c565b14156110f857826001600160a01b03166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190611dcc565b90506110c46001600160a01b038a16828a611166565b806001600160a01b0316639e422c338a8a8a8e8b6040518663ffffffff1660e01b8152600401610fb5959493929190611de9565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f727465640000000000000060448201526064016101fe565b9850989650505050505050565b606061115c8484600085611437565b90505b9392505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156111b257600080fd5b505afa1580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190611beb565b6111f49190611e24565b6040516001600160a01b03851660248201526044810182905290915061084a90859063095ea7b360e01b906064016107d6565b6040516001600160601b031930606090811b8216602084015287811b8216603484015286901b166048820152605c81018490526001600160c01b031960c084811b8216607c84015283811b8216608484015246901b16608c8201526000906094015b60405160208183030381529060405280519060200120905095945050505050565b6040516001600160601b031930606090811b8216602084015286811b82166034840152604883018690526001600160c01b031960c086811b821660688601529189901b909216607084015283811b8216608484015246901b16608c820152600090609401611289565b80158061139c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561136257600080fd5b505afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139a9190611beb565b155b6114075760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101fe565b6040516001600160a01b03831660248201526044810182905261080d90849063095ea7b360e01b906064016107d6565b6060824710156114985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101fe565b6001600160a01b0385163b6114ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101fe565b600080866001600160a01b0316858760405161150b9190611e4a565b60006040518083038185875af1925050503d8060008114611548576040519150601f19603f3d011682016040523d82523d6000602084013e61154d565b606091505b509150915061155d828286611568565b979650505050505050565b6060831561157757508161115f565b8251156115875782518084602001fd5b8160405162461bcd60e51b81526004016101fe9190611bd8565b6001600160a01b03811681146115b657600080fd5b50565b80356115c4816115a1565b919050565b60008083601f8401126115db57600080fd5b5081356001600160401b038111156115f257600080fd5b60208301915083602082850101111561160a57600080fd5b9250929050565b6000806000806060858703121561162757600080fd5b8435611632816115a1565b93506020850135925060408501356001600160401b0381111561165457600080fd5b611660878288016115c9565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106116a457634e487b7160e01b600052602160045260246000fd5b91905290565b6001600160401b03811681146115b657600080fd5b803563ffffffff811681146115c457600080fd5b600080600080600060a086880312156116eb57600080fd5b85356116f6816115a1565b94506020860135611706816115a1565b935060408601359250606086013561171d816116aa565b915061172b608087016116bf565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171561176f5761176f611737565b60405290565b604051601f8201601f191681016001600160401b038111828210171561179d5761179d611737565b604052919050565b80151581146115b657600080fd5b6000606082840312156117c557600080fd5b604051606081018181106001600160401b03821117156117e7576117e7611737565b60405282356117f5816117a5565b8152611803602084016116bf565b60208201526040830135611816816115a1565b60408201529392505050565b60005b8381101561183d578181015183820152602001611825565b8381111561084a5750506000910152565b60008151808452611866816020860160208601611822565b601f01601f19169290920160200192915050565b82815260406020820152600061115c604083018461184e565b600080600080600080600060c0888a0312156118ae57600080fd5b87356118b9816115a1565b965060208801356118c9816115a1565b95506040880135945060608801356118e0816116aa565b935060808801356001600160401b038111156118fb57600080fd5b6119078a828b016115c9565b90945092505060a088013561191b816115a1565b8091505092959891949750929550565b600080600080600060a0868803121561194357600080fd5b853561194e816115a1565b945060208681013561195f816115a1565b9450604087013593506060870135611976816116aa565b925060808701356001600160401b038082111561199257600080fd5b818901915089601f8301126119a657600080fd5b8135818111156119b8576119b8611737565b6119ca601f8201601f19168501611775565b91508082528a848285010111156119e057600080fd5b80848401858401376000848284010152508093505050509295509295909350565b60208082526019908201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604082015260600190565b60006001600160401b03821115611a5157611a51611737565b5060051b60200190565b600082601f830112611a6c57600080fd5b81356020611a81611a7c83611a38565b611775565b82815260059290921b84018101918181019086841115611aa057600080fd5b8286015b84811015611abb5780358352918301918301611aa4565b509695505050505050565b60006020808385031215611ad957600080fd5b82356001600160401b0380821115611af057600080fd5b9084019060808287031215611b0457600080fd5b611b0c61174d565b8235611b17816116aa565b81528284013582811115611b2a57600080fd5b8301601f81018813611b3b57600080fd5b8035611b49611a7c82611a38565b81815260059190911b8201860190868101908a831115611b6857600080fd5b928701925b82841015611b8f578335611b80816115a1565b82529287019290870190611b6d565b8088860152505050506040830135935081841115611bac57600080fd5b611bb887858501611a5b565b6040820152611bc9606084016115b9565b60608201529695505050505050565b60208152600061115f602083018461184e565b600060208284031215611bfd57600080fd5b5051919050565b600060208284031215611c1657600080fd5b815161115f816117a5565b80516115c4816115a1565b600082601f830112611c3d57600080fd5b81516020611c4d611a7c83611a38565b82815260059290921b84018101918181019086841115611c6c57600080fd5b8286015b84811015611abb5780518352918301918301611c70565b60006020808385031215611c9a57600080fd5b82516001600160401b0380821115611cb157600080fd5b9084019060808287031215611cc557600080fd5b611ccd61174d565b8251611cd8816116aa565b81528284015182811115611ceb57600080fd5b8301601f81018813611cfc57600080fd5b8051611d0a611a7c82611a38565b81815260059190911b8201860190868101908a831115611d2957600080fd5b928701925b82841015611d50578351611d41816115a1565b82529287019290870190611d2e565b8088860152505050506040830151935081841115611d6d57600080fd5b611d7987858501611c2c565b6040820152611bc960608401611c21565b6001600160a01b0386811682526001600160401b0386166020830152841660408201526060810183905260a06080820181905260009061155d9083018461184e565b600060208284031215611dde57600080fd5b815161115f816115a1565b6001600160a01b03958616815260208101949094526001600160401b0392831660408501529316606083015291909116608082015260a00190565b60008219821115611e4557634e487b7160e01b600052601160045260246000fd5b500190565b60008251611e5c818460208701611822565b919091019291505056fea26469706673582212205af5c5b4c06e053fe4e122f4bf78a57b9063e4f4b274d4137de60598a5cdd99b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1941,
        "contract": "contracts/Demo.sol:Demo",
        "label": "transfer2",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(TransferRequest)738_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_struct(TransferRequest)738_storage": {
        "encoding": "inplace",
        "label": "struct IBaseStruct.TransferRequest",
        "members": [
          {
            "astId": 729,
            "contract": "contracts/Demo.sol:Demo",
            "label": "nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 732,
            "contract": "contracts/Demo.sol:Demo",
            "label": "accounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 735,
            "contract": "contracts/Demo.sol:Demo",
            "label": "amounts",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 737,
            "contract": "contracts/Demo.sol:Demo",
            "label": "sender",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}