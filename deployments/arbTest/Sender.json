{
  "address": "0x8C4F1E5D5e12ca44E6eB5cFf5F827f1DBD0fB1B5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "executeMessageWithTransferFallback",
      "outputs": [
        {
          "internalType": "enum IBatchTransfer.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "enum IBatchTransfer.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataAmount",
          "type": "uint256"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_dataAmount",
          "type": "uint256"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfer2",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xed33c67600f615e3da885c135bf89557599051664221988746db8ea011dd3fdb",
  "receipt": {
    "to": null,
    "from": "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "contractAddress": "0x8C4F1E5D5e12ca44E6eB5cFf5F827f1DBD0fB1B5",
    "transactionIndex": 0,
    "gasUsed": "24485160",
    "logsBloom": "0x
    "blockHash": "0x6d58ba41d20f14bc36101f5a38b8454857a32b3ba49b1f82fbe8659d3c4a5705",
    "transactionHash": "0xed33c67600f615e3da885c135bf89557599051664221988746db8ea011dd3fdb",
    "logs": [],
    "blockNumber": 13077121,
    "cumulativeGasUsed": "11269360",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7d43AABC515C356145049227CeE54B608342c0ad"
  ],
  "numDeployments": 1,
  "solcInputHash": "c3794de10fbff0e9299fa6b498de6e88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"enum IBatchTransfer.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"enum IBatchTransfer.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataAmount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_dataAmount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer2\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sender.sol\":\"Sender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/Sender.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.9;\\n\\nimport \\\"./interface/IBatchTransfer.sol\\\";\\nimport \\\"./interface/IMessageBus.sol\\\";\\nimport {MessageSenderLib, MsgDataTypes} from \\\"./lib/MessageSenderLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Sender is IBatchTransfer {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable messageBus;\\n\\n    modifier onlyMessageBus() {\\n        require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        _;\\n    }\\n\\n    constructor(address _messageBus) {\\n        messageBus = _messageBus;\\n    }\\n\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint32 _maxSlippage,\\n        uint256 _dataAmount\\n    ) external payable {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        (uint256 _fee, bytes memory _data) = getFee(_dataAmount);\\n        require(msg.value > _fee, \\\"Insufficient fee\\\");\\n\\n        MessageSenderLib.sendMessageWithTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            uint64(block.timestamp), // nonce\\n            _maxSlippage,\\n            _data, // message\\n            MsgDataTypes.BridgeSendType.Liquidity, // the bridge type, we are using liquidity bridge at here\\n            messageBus,\\n            _fee\\n        );\\n    }\\n\\n    function getFee(uint256 _dataAmount)\\n        public\\n        view\\n        returns (uint256, bytes memory)\\n    {\\n        bytes memory _data = abi.encode(_dataAmount);\\n        return (IMessageBus(messageBus).calcFee(_data), _data);\\n    }\\n\\n    // ============== message bus support ==============\\n\\n    TransferRequest public transfer;\\n\\n    //\\u8de8\\u94fe\\u6865\\u51fa\\u95ee\\u9898\\u8c03\\u7528\\u8fd9\\u4e2a\\n    function executeMessageWithTransferRefund(\\n        address,\\n        uint256,\\n        bytes calldata _message\\n    ) external payable onlyMessageBus returns (ExecutionStatus) {\\n        TransferRequest memory _transfer = abi.decode(\\n            (_message),\\n            (TransferRequest)\\n        );\\n        transfer = _transfer;\\n        // IERC20(_token).safeTransfer(_transfer.sender, _amount);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    TransferRequest public transfer2;\\n\\n    //\\u76ee\\u6807\\u94fe\\u7684\\u6267\\u884c\\u5931\\u8d25\\u6267\\u884c\\u8fd9\\u4e2a\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes memory _message\\n    ) external payable onlyMessageBus returns (ExecutionStatus) {\\n        TransferRequest memory _transfer = abi.decode(\\n            (_message),\\n            (TransferRequest)\\n        );\\n        transfer2 = _transfer;\\n        // IERC20(_token).safeTransfer(_transfer.sender, _amount);\\n        // bytes memory message = abi.encode(\\n        //     TransferReceipt({\\n        //         nonce: transfer.nonce,\\n        //         status: TransferStatus.Fail\\n        //     })\\n        // );\\n\\n        // MessageSenderLib.sendMessage(\\n        //     _sender,\\n        //     _srcChainId,\\n        //     message,\\n        //     messageBus,\\n        //     msg.value\\n        // );\\n        return ExecutionStatus.Success;\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x74f341894a592fb812d8d0f2780bac0a412f3f3448209a324a5584d3a9c67763\",\"license\":\"Unlicense\"},\"contracts/interface/IBatchTransfer.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.9;\\n\\ninterface IBatchTransfer {\\n    struct TransferRequest {\\n        uint64 nonce;\\n        address[] accounts;\\n        uint256[] amounts;\\n        address sender;\\n    }\\n\\n    enum ExecutionStatus {\\n        Fail,\\n        Success,\\n        Retry\\n    }\\n\\n    enum TransferStatus {\\n        Null,\\n        Success,\\n        Fail\\n    }\\n\\n    struct TransferReceipt {\\n        uint64 nonce;\\n        TransferStatus status;\\n    }\\n}\\n\",\"keccak256\":\"0xaeadc16bfb3e682eec1053939c4fd7cc5388752399089ab523f95e7cb427eb9b\",\"license\":\"Unlicense\"},\"contracts/interface/IMessageBus.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.9;\\n\\ninterface IMessageBus {\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb987ff38867e2ffd5d763498af9884022fdcb4edfc55cac7dba3adc8373f1625\",\"license\":\"Unlicense\"},\"contracts/lib/MessageSenderLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        (bytes32 transferId, address bridge) = sendTokenTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            _nonce,\\n            _maxSlippage,\\n            _bridgeSendType,\\n            _messageBus\\n        );\\n        if (_message.length > 0) {\\n            IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n                _receiver,\\n                _dstChainId,\\n                bridge,\\n                transferId,\\n                _message\\n            );\\n        }\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus\\n    ) internal returns (bytes32 transferId, address bridge) {\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            bridge = IMessageBus(_messageBus).liquidityBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n            transferId = computeLiqBridgeTransferId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            bridge = IMessageBus(_messageBus).pegVault();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IOriginalTokenVault(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = computePegV1DepositId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            bridge = IMessageBus(_messageBus).pegBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IPeggedTokenBridge(bridge).burn(_token, _amount, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n            transferId = computePegV1BurnId(_receiver, _token, _amount, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n            bridge = IMessageBus(_messageBus).pegVaultV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IOriginalTokenVaultV2(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    function computeLiqBridgeTransferId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1DepositId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1BurnId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid)));\\n    }\\n}\\n\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\\n    function burnFrom(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\\ninterface IMessageBus {\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    /**\\n     * @notice Sends a message to a contract on another chain.\\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\\n     * If messages with the same Id are sent, only one of them will succeed at dst chain..\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to a contract on another chain.\\n     * If messages with the same srcTransferId are sent, only one of them will succeed at dst chain..\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n}\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\",\"keccak256\":\"0x69240b7391e95598c0b26f1268a10771f427598c4e068bb78713e72925efa208\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611c3e380380611c3e83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611b976100a760003960008181610133015281816101ce0152818161034e0152818161038b01526104da0152611b976000f3fe60806040526004361061006e5760003560e01c8063a1a227fa1161004b578063a1a227fa14610121578063bfa61d7f1461016d578063f00f39ce14610180578063fcee45f41461019357005b806320be95f214610077578063248c44e8146100a05780638a4068dd146100f457005b3661007557005b005b61008a61008536600461140c565b6101c1565b60405161009791906114aa565b60405180910390f35b3480156100ac57600080fd5b506004546007546100cd916001600160401b0316906001600160a01b031682565b604080516001600160401b0390931683526001600160a01b03909116602083015201610097565b34801561010057600080fd5b506000546003546100cd916001600160401b0316906001600160a01b031682565b34801561012d57600080fd5b506101557f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610097565b61007561017b3660046114e7565b6102d9565b61008a61018e3660046115ce565b61037e565b34801561019f57600080fd5b506101b36101ae3660046116a4565b61049a565b604051610097929190611715565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461023c5760405162461bcd60e51b815260206004820152601960248201527863616c6c6572206973206e6f74206d6573736167652062757360381b60448201526064015b60405180910390fd5b600061024a838501856117bc565b80516000805467ffffffffffffffff19166001600160401b039092169190911781556020808301518051939450849361028792600192019061132f565b50604082015180516102a3916002840191602090910190611394565b5060609190910151600390910180546001600160a01b0319166001600160a01b0390921691909117905550600195945050505050565b6102ee6001600160a01b038616333087610568565b6000806102fa8361049a565b915091508134116103405760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606401610233565b6103738888888842898760017f00000000000000000000000000000000000000000000000000000000000000008b6105d9565b505050505050505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103f45760405162461bcd60e51b815260206004820152601960248201527863616c6c6572206973206e6f74206d6573736167652062757360381b6044820152606401610233565b60008280602001905181019061040a9190611934565b80516004805467ffffffffffffffff19166001600160401b039092169190911781556020808301518051939450849361044792600592019061132f565b5060408201518051610463916002840191602090910190611394565b5060609190910151600390910180546001600160a01b0319166001600160a01b039092169190911790555060019695505050505050565b600060606000836040516020016104b391815260200190565b60408051601f198184030181529082905263299aee5160e11b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635335dca29061050f908490600401611a37565b60206040518083038186803b15801561052757600080fd5b505afa15801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f9190611a4a565b94909350915050565b6040516001600160a01b03808516602483015283166044820152606481018290526105d39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610672565b50505050565b60008060006105ee8d8d8d8d8d8d8c8c610749565b885191935091501561066257846001600160a01b0316634289fbb3858f8d85878d6040518763ffffffff1660e01b815260040161062f959493929190611a63565b6000604051808303818588803b15801561064857600080fd5b505af115801561065c573d6000803e3d6000fd5b50505050505b509b9a5050505050505050505050565b60006106c7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610edb9092919063ffffffff16565b80519091501561074457808060200190518101906106e59190611aa5565b6107445760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610233565b505050565b600080600184600681111561076057610760611494565b141561088e57826001600160a01b03166382980dc46040518163ffffffff1660e01b815260040160206040518083038186803b15801561079f57600080fd5b505afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190611ac7565b90506107ed6001600160a01b038a16828a610ef4565b60405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a90526001600160401b03808a1660648401528816608483015263ffffffff871660a483015282169063a5977fbb9060c401600060405180830381600087803b15801561086257600080fd5b505af1158015610876573d6000803e3d6000fd5b505050506108878a8a8a8a8a610fb5565b9150610ece565b60028460068111156108a2576108a2611494565b14156109a257826001600160a01b031663d8257d176040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e157600080fd5b505afa1580156108f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109199190611ac7565b905061092f6001600160a01b038a16828a610ef4565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610963959493929190611ae4565b600060405180830381600087803b15801561097d57600080fd5b505af1158015610991573d6000803e3d6000fd5b505050506108878a8a8a8a8a611038565b60038460068111156109b6576109b6611494565b1415610b4757826001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190611ac7565b9050610a436001600160a01b038a16828a610ef4565b604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b811660448301526001600160401b038816606483015282169063de790c7e90608401600060405180830381600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b50610ad2925050506001600160a01b038a168260006110a1565b604080516001600160601b031930606090811b82166020808501919091528d821b83166034850152604884018d9052908e901b90911660688301526001600160c01b031960c08a811b8216607c85015246901b1660848301528251808303606c018152608c9092019092528051910120610887565b6004846006811115610b5b57610b5b611494565b1415610c6e57826001600160a01b031663c66a9c5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9a57600080fd5b505afa158015610bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd29190611ac7565b9050610be86001600160a01b038a16828a610ef4565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610c1c959493929190611ae4565b602060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108879190611a4a565b6005846006811115610c8257610c82611494565b1415610db157826001600160a01b03166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc157600080fd5b505afa158015610cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf99190611ac7565b9050610d0f6001600160a01b038a16828a610ef4565b806001600160a01b031663a00293018a8a8a8e8b6040518663ffffffff1660e01b8152600401610d43959493929190611ae4565b602060405180830381600087803b158015610d5d57600080fd5b505af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d959190611a4a565b9150610dac6001600160a01b038a168260006110a1565b610ece565b6006846006811115610dc557610dc5611494565b1415610e8657826001600160a01b03166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0457600080fd5b505afa158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c9190611ac7565b9050610e526001600160a01b038a16828a610ef4565b806001600160a01b0316639e422c338a8a8a8e8b6040518663ffffffff1660e01b8152600401610d43959493929190611ae4565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f72746564000000000000006044820152606401610233565b9850989650505050505050565b6060610eea84846000856111c5565b90505b9392505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015610f4057600080fd5b505afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190611a4a565b610f829190611b1f565b6040516001600160a01b0385166024820152604481018290529091506105d390859063095ea7b360e01b9060640161059c565b6040516001600160601b031930606090811b8216602084015287811b8216603484015286901b166048820152605c81018490526001600160c01b031960c084811b8216607c84015283811b8216608484015246901b16608c8201526000906094015b60405160208183030381529060405280519060200120905095945050505050565b6040516001600160601b031930606090811b8216602084015286811b82166034840152604883018690526001600160c01b031960c086811b821660688601529189901b909216607084015283811b8216608484015246901b16608c820152600090609401611017565b80158061112a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156110f057600080fd5b505afa158015611104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111289190611a4a565b155b6111955760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610233565b6040516001600160a01b03831660248201526044810182905261074490849063095ea7b360e01b9060640161059c565b6060824710156112265760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610233565b6001600160a01b0385163b61127d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610233565b600080866001600160a01b031685876040516112999190611b45565b60006040518083038185875af1925050503d80600081146112d6576040519150601f19603f3d011682016040523d82523d6000602084013e6112db565b606091505b50915091506112eb8282866112f6565b979650505050505050565b60608315611305575081610eed565b8251156113155782518084602001fd5b8160405162461bcd60e51b81526004016102339190611a37565b828054828255906000526020600020908101928215611384579160200282015b8281111561138457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061134f565b506113909291506113cf565b5090565b828054828255906000526020600020908101928215611384579160200282015b828111156113845782518255916020019190600101906113b4565b5b8082111561139057600081556001016113d0565b6001600160a01b03811681146113f957600080fd5b50565b8035611407816113e4565b919050565b6000806000806060858703121561142257600080fd5b843561142d816113e4565b93506020850135925060408501356001600160401b038082111561145057600080fd5b818701915087601f83011261146457600080fd5b81358181111561147357600080fd5b88602082850101111561148557600080fd5b95989497505060200194505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106114cc57634e487b7160e01b600052602160045260246000fd5b91905290565b6001600160401b03811681146113f957600080fd5b60008060008060008060c0878903121561150057600080fd5b863561150b816113e4565b9550602087013561151b816113e4565b9450604087013593506060870135611532816114d2565b9250608087013563ffffffff8116811461154b57600080fd5b8092505060a087013590509295509295509295565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171561159857611598611560565b60405290565b604051601f8201601f191681016001600160401b03811182821017156115c6576115c6611560565b604052919050565b600080600080600060a086880312156115e657600080fd5b85356115f1816113e4565b9450602086810135611602816113e4565b9450604087013593506060870135611619816114d2565b925060808701356001600160401b038082111561163557600080fd5b818901915089601f83011261164957600080fd5b81358181111561165b5761165b611560565b61166d601f8201601f1916850161159e565b91508082528a8482850101111561168357600080fd5b80848401858401376000848284010152508093505050509295509295909350565b6000602082840312156116b657600080fd5b5035919050565b60005b838110156116d85781810151838201526020016116c0565b838111156105d35750506000910152565b600081518084526117018160208601602086016116bd565b601f01601f19169290920160200192915050565b828152604060208201526000610eea60408301846116e9565b60006001600160401b0382111561174757611747611560565b5060051b60200190565b600082601f83011261176257600080fd5b813560206117776117728361172e565b61159e565b82815260059290921b8401810191818101908684111561179657600080fd5b8286015b848110156117b1578035835291830191830161179a565b509695505050505050565b600060208083850312156117cf57600080fd5b82356001600160401b03808211156117e657600080fd5b90840190608082870312156117fa57600080fd5b611802611576565b823561180d816114d2565b8152828401358281111561182057600080fd5b8301601f8101881361183157600080fd5b803561183f6117728261172e565b81815260059190911b8201860190868101908a83111561185e57600080fd5b928701925b82841015611885578335611876816113e4565b82529287019290870190611863565b80888601525050505060408301359350818411156118a257600080fd5b6118ae87858501611751565b60408201526118bf606084016113fc565b60608201529695505050505050565b8051611407816113e4565b600082601f8301126118ea57600080fd5b815160206118fa6117728361172e565b82815260059290921b8401810191818101908684111561191957600080fd5b8286015b848110156117b1578051835291830191830161191d565b6000602080838503121561194757600080fd5b82516001600160401b038082111561195e57600080fd5b908401906080828703121561197257600080fd5b61197a611576565b8251611985816114d2565b8152828401518281111561199857600080fd5b8301601f810188136119a957600080fd5b80516119b76117728261172e565b81815260059190911b8201860190868101908a8311156119d657600080fd5b928701925b828410156119fd5783516119ee816113e4565b825292870192908701906119db565b8088860152505050506040830151935081841115611a1a57600080fd5b611a26878585016118d9565b60408201526118bf606084016118ce565b602081526000610eed60208301846116e9565b600060208284031215611a5c57600080fd5b5051919050565b6001600160a01b0386811682526001600160401b0386166020830152841660408201526060810183905260a0608082018190526000906112eb908301846116e9565b600060208284031215611ab757600080fd5b81518015158114610eed57600080fd5b600060208284031215611ad957600080fd5b8151610eed816113e4565b6001600160a01b03958616815260208101949094526001600160401b0392831660408501529316606083015291909116608082015260a00190565b60008219821115611b4057634e487b7160e01b600052601160045260246000fd5b500190565b60008251611b578184602087016116bd565b919091019291505056fea26469706673582212203b586c703c75ff65be735a7201f1be5a764ec2678580ddbdb48812cc2366e20764736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061006e5760003560e01c8063a1a227fa1161004b578063a1a227fa14610121578063bfa61d7f1461016d578063f00f39ce14610180578063fcee45f41461019357005b806320be95f214610077578063248c44e8146100a05780638a4068dd146100f457005b3661007557005b005b61008a61008536600461140c565b6101c1565b60405161009791906114aa565b60405180910390f35b3480156100ac57600080fd5b506004546007546100cd916001600160401b0316906001600160a01b031682565b604080516001600160401b0390931683526001600160a01b03909116602083015201610097565b34801561010057600080fd5b506000546003546100cd916001600160401b0316906001600160a01b031682565b34801561012d57600080fd5b506101557f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610097565b61007561017b3660046114e7565b6102d9565b61008a61018e3660046115ce565b61037e565b34801561019f57600080fd5b506101b36101ae3660046116a4565b61049a565b604051610097929190611715565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461023c5760405162461bcd60e51b815260206004820152601960248201527863616c6c6572206973206e6f74206d6573736167652062757360381b60448201526064015b60405180910390fd5b600061024a838501856117bc565b80516000805467ffffffffffffffff19166001600160401b039092169190911781556020808301518051939450849361028792600192019061132f565b50604082015180516102a3916002840191602090910190611394565b5060609190910151600390910180546001600160a01b0319166001600160a01b0390921691909117905550600195945050505050565b6102ee6001600160a01b038616333087610568565b6000806102fa8361049a565b915091508134116103405760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606401610233565b6103738888888842898760017f00000000000000000000000000000000000000000000000000000000000000008b6105d9565b505050505050505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103f45760405162461bcd60e51b815260206004820152601960248201527863616c6c6572206973206e6f74206d6573736167652062757360381b6044820152606401610233565b60008280602001905181019061040a9190611934565b80516004805467ffffffffffffffff19166001600160401b039092169190911781556020808301518051939450849361044792600592019061132f565b5060408201518051610463916002840191602090910190611394565b5060609190910151600390910180546001600160a01b0319166001600160a01b039092169190911790555060019695505050505050565b600060606000836040516020016104b391815260200190565b60408051601f198184030181529082905263299aee5160e11b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635335dca29061050f908490600401611a37565b60206040518083038186803b15801561052757600080fd5b505afa15801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f9190611a4a565b94909350915050565b6040516001600160a01b03808516602483015283166044820152606481018290526105d39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610672565b50505050565b60008060006105ee8d8d8d8d8d8d8c8c610749565b885191935091501561066257846001600160a01b0316634289fbb3858f8d85878d6040518763ffffffff1660e01b815260040161062f959493929190611a63565b6000604051808303818588803b15801561064857600080fd5b505af115801561065c573d6000803e3d6000fd5b50505050505b509b9a5050505050505050505050565b60006106c7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610edb9092919063ffffffff16565b80519091501561074457808060200190518101906106e59190611aa5565b6107445760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610233565b505050565b600080600184600681111561076057610760611494565b141561088e57826001600160a01b03166382980dc46040518163ffffffff1660e01b815260040160206040518083038186803b15801561079f57600080fd5b505afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190611ac7565b90506107ed6001600160a01b038a16828a610ef4565b60405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a90526001600160401b03808a1660648401528816608483015263ffffffff871660a483015282169063a5977fbb9060c401600060405180830381600087803b15801561086257600080fd5b505af1158015610876573d6000803e3d6000fd5b505050506108878a8a8a8a8a610fb5565b9150610ece565b60028460068111156108a2576108a2611494565b14156109a257826001600160a01b031663d8257d176040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e157600080fd5b505afa1580156108f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109199190611ac7565b905061092f6001600160a01b038a16828a610ef4565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610963959493929190611ae4565b600060405180830381600087803b15801561097d57600080fd5b505af1158015610991573d6000803e3d6000fd5b505050506108878a8a8a8a8a611038565b60038460068111156109b6576109b6611494565b1415610b4757826001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190611ac7565b9050610a436001600160a01b038a16828a610ef4565b604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b811660448301526001600160401b038816606483015282169063de790c7e90608401600060405180830381600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b50610ad2925050506001600160a01b038a168260006110a1565b604080516001600160601b031930606090811b82166020808501919091528d821b83166034850152604884018d9052908e901b90911660688301526001600160c01b031960c08a811b8216607c85015246901b1660848301528251808303606c018152608c9092019092528051910120610887565b6004846006811115610b5b57610b5b611494565b1415610c6e57826001600160a01b031663c66a9c5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9a57600080fd5b505afa158015610bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd29190611ac7565b9050610be86001600160a01b038a16828a610ef4565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610c1c959493929190611ae4565b602060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108879190611a4a565b6005846006811115610c8257610c82611494565b1415610db157826001600160a01b03166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc157600080fd5b505afa158015610cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf99190611ac7565b9050610d0f6001600160a01b038a16828a610ef4565b806001600160a01b031663a00293018a8a8a8e8b6040518663ffffffff1660e01b8152600401610d43959493929190611ae4565b602060405180830381600087803b158015610d5d57600080fd5b505af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d959190611a4a565b9150610dac6001600160a01b038a168260006110a1565b610ece565b6006846006811115610dc557610dc5611494565b1415610e8657826001600160a01b03166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0457600080fd5b505afa158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c9190611ac7565b9050610e526001600160a01b038a16828a610ef4565b806001600160a01b0316639e422c338a8a8a8e8b6040518663ffffffff1660e01b8152600401610d43959493929190611ae4565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f72746564000000000000006044820152606401610233565b9850989650505050505050565b6060610eea84846000856111c5565b90505b9392505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015610f4057600080fd5b505afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190611a4a565b610f829190611b1f565b6040516001600160a01b0385166024820152604481018290529091506105d390859063095ea7b360e01b9060640161059c565b6040516001600160601b031930606090811b8216602084015287811b8216603484015286901b166048820152605c81018490526001600160c01b031960c084811b8216607c84015283811b8216608484015246901b16608c8201526000906094015b60405160208183030381529060405280519060200120905095945050505050565b6040516001600160601b031930606090811b8216602084015286811b82166034840152604883018690526001600160c01b031960c086811b821660688601529189901b909216607084015283811b8216608484015246901b16608c820152600090609401611017565b80158061112a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156110f057600080fd5b505afa158015611104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111289190611a4a565b155b6111955760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610233565b6040516001600160a01b03831660248201526044810182905261074490849063095ea7b360e01b9060640161059c565b6060824710156112265760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610233565b6001600160a01b0385163b61127d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610233565b600080866001600160a01b031685876040516112999190611b45565b60006040518083038185875af1925050503d80600081146112d6576040519150601f19603f3d011682016040523d82523d6000602084013e6112db565b606091505b50915091506112eb8282866112f6565b979650505050505050565b60608315611305575081610eed565b8251156113155782518084602001fd5b8160405162461bcd60e51b81526004016102339190611a37565b828054828255906000526020600020908101928215611384579160200282015b8281111561138457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061134f565b506113909291506113cf565b5090565b828054828255906000526020600020908101928215611384579160200282015b828111156113845782518255916020019190600101906113b4565b5b8082111561139057600081556001016113d0565b6001600160a01b03811681146113f957600080fd5b50565b8035611407816113e4565b919050565b6000806000806060858703121561142257600080fd5b843561142d816113e4565b93506020850135925060408501356001600160401b038082111561145057600080fd5b818701915087601f83011261146457600080fd5b81358181111561147357600080fd5b88602082850101111561148557600080fd5b95989497505060200194505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106114cc57634e487b7160e01b600052602160045260246000fd5b91905290565b6001600160401b03811681146113f957600080fd5b60008060008060008060c0878903121561150057600080fd5b863561150b816113e4565b9550602087013561151b816113e4565b9450604087013593506060870135611532816114d2565b9250608087013563ffffffff8116811461154b57600080fd5b8092505060a087013590509295509295509295565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171561159857611598611560565b60405290565b604051601f8201601f191681016001600160401b03811182821017156115c6576115c6611560565b604052919050565b600080600080600060a086880312156115e657600080fd5b85356115f1816113e4565b9450602086810135611602816113e4565b9450604087013593506060870135611619816114d2565b925060808701356001600160401b038082111561163557600080fd5b818901915089601f83011261164957600080fd5b81358181111561165b5761165b611560565b61166d601f8201601f1916850161159e565b91508082528a8482850101111561168357600080fd5b80848401858401376000848284010152508093505050509295509295909350565b6000602082840312156116b657600080fd5b5035919050565b60005b838110156116d85781810151838201526020016116c0565b838111156105d35750506000910152565b600081518084526117018160208601602086016116bd565b601f01601f19169290920160200192915050565b828152604060208201526000610eea60408301846116e9565b60006001600160401b0382111561174757611747611560565b5060051b60200190565b600082601f83011261176257600080fd5b813560206117776117728361172e565b61159e565b82815260059290921b8401810191818101908684111561179657600080fd5b8286015b848110156117b1578035835291830191830161179a565b509695505050505050565b600060208083850312156117cf57600080fd5b82356001600160401b03808211156117e657600080fd5b90840190608082870312156117fa57600080fd5b611802611576565b823561180d816114d2565b8152828401358281111561182057600080fd5b8301601f8101881361183157600080fd5b803561183f6117728261172e565b81815260059190911b8201860190868101908a83111561185e57600080fd5b928701925b82841015611885578335611876816113e4565b82529287019290870190611863565b80888601525050505060408301359350818411156118a257600080fd5b6118ae87858501611751565b60408201526118bf606084016113fc565b60608201529695505050505050565b8051611407816113e4565b600082601f8301126118ea57600080fd5b815160206118fa6117728361172e565b82815260059290921b8401810191818101908684111561191957600080fd5b8286015b848110156117b1578051835291830191830161191d565b6000602080838503121561194757600080fd5b82516001600160401b038082111561195e57600080fd5b908401906080828703121561197257600080fd5b61197a611576565b8251611985816114d2565b8152828401518281111561199857600080fd5b8301601f810188136119a957600080fd5b80516119b76117728261172e565b81815260059190911b8201860190868101908a8311156119d657600080fd5b928701925b828410156119fd5783516119ee816113e4565b825292870192908701906119db565b8088860152505050506040830151935081841115611a1a57600080fd5b611a26878585016118d9565b60408201526118bf606084016118ce565b602081526000610eed60208301846116e9565b600060208284031215611a5c57600080fd5b5051919050565b6001600160a01b0386811682526001600160401b0386166020830152841660408201526060810183905260a0608082018190526000906112eb908301846116e9565b600060208284031215611ab757600080fd5b81518015158114610eed57600080fd5b600060208284031215611ad957600080fd5b8151610eed816113e4565b6001600160a01b03958616815260208101949094526001600160401b0392831660408501529316606083015291909116608082015260a00190565b60008219821115611b4057634e487b7160e01b600052601160045260246000fd5b500190565b60008251611b578184602087016116bd565b919091019291505056fea26469706673582212203b586c703c75ff65be735a7201f1be5a764ec2678580ddbdb48812cc2366e20764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 730,
        "contract": "contracts/Sender.sol:Sender",
        "label": "transfer",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(TransferRequest)825_storage"
      },
      {
        "astId": 766,
        "contract": "contracts/Sender.sol:Sender",
        "label": "transfer2",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(TransferRequest)825_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_struct(TransferRequest)825_storage": {
        "encoding": "inplace",
        "label": "struct IBatchTransfer.TransferRequest",
        "members": [
          {
            "astId": 816,
            "contract": "contracts/Sender.sol:Sender",
            "label": "nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 819,
            "contract": "contracts/Sender.sol:Sender",
            "label": "accounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 822,
            "contract": "contracts/Sender.sol:Sender",
            "label": "amounts",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 824,
            "contract": "contracts/Sender.sol:Sender",
            "label": "sender",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}